diff --git a/src/coreclr/build.sh b/src/coreclr/build.sh
index 7b433054f6..10e5eaac75 100755
--- a/src/coreclr/build.sh
+++ b/src/coreclr/build.sh
@@ -93,6 +93,9 @@ initHostDistroRid()
 
 initTargetDistroRid()
 {
+    export __DistroDir=linux-armel
+    return
+
     if [ $__CrossBuild == 1 ]; then
         if [ "$__BuildOS" == "Linux" ]; then
             if [ ! -e $ROOTFS_DIR/etc/os-release ]; then
@@ -323,9 +326,9 @@ build_native()
     # Check that the makefiles were created.
     pushd "$intermediatesForBuild"
 
-    echo "Executing $buildTool install -j $__NumProc"
+    echo "Executing $buildTool install ${PARALLEL_MAKEINST}"
 
-    $buildTool install -j $__NumProc
+    $buildTool install -j ${PARALLEL_MAKEINST}
     if [ $? != 0 ]; then
         echo "Failed to build $message."
         exit 1
diff --git a/src/coreclr/compileoptions.cmake b/src/coreclr/compileoptions.cmake
index 9c352e8bab..c748eba2b4 100644
--- a/src/coreclr/compileoptions.cmake
+++ b/src/coreclr/compileoptions.cmake
@@ -39,7 +39,7 @@ if (CLR_CMAKE_PLATFORM_UNIX)
   # and so the compiler thinks that there is a mistake.
   add_compile_options(-Wno-constant-logical-operand)
   # We use pshpack1/2/4/8.h and poppack.h headers to set and restore packing. However
-  # clang 6.0 complains when the packing change lifetime is not contained within 
+  # clang 6.0 complains when the packing change lifetime is not contained within
   # a header file.
   add_compile_options(-Wno-pragma-pack)
 
@@ -65,7 +65,7 @@ if(CLR_CMAKE_PLATFORM_UNIX_ARM)
    if(ARM_SOFTFP)
      add_definitions(-DARM_SOFTFP)
      add_compile_options(-mfloat-abi=softfp)
-     add_compile_options(-target armv7-linux-gnueabi)
+     #add_compile_options(-target armv7-linux-gnueabi)
    else()
      add_compile_options(-target armv7-linux-gnueabihf)
    endif(ARM_SOFTFP)
@@ -113,19 +113,19 @@ if (WIN32)
   endif (CLR_CMAKE_PLATFORM_ARCH_AMD64)
 
   # enable control-flow-guard support for native components for non-Arm64 builds
-  add_compile_options(/guard:cf) 
+  add_compile_options(/guard:cf)
 
-  # Statically linked CRT (libcmt[d].lib, libvcruntime[d].lib and libucrt[d].lib) by default. This is done to avoid  
-  # linking in VCRUNTIME140.DLL for a simplified xcopy experience by reducing the dependency on VC REDIST.  
-  #  
-  # For Release builds, we shall dynamically link into uCRT [ucrtbase.dll] (which is pushed down as a Windows Update on downlevel OS) but  
-  # wont do the same for debug/checked builds since ucrtbased.dll is not redistributable and Debug/Checked builds are not  
-  # production-time scenarios.  
-  add_compile_options($<$<OR:$<CONFIG:Release>,$<CONFIG:Relwithdebinfo>>:/MT>)  
-  add_compile_options($<$<OR:$<CONFIG:Debug>,$<CONFIG:Checked>>:/MTd>)  
+  # Statically linked CRT (libcmt[d].lib, libvcruntime[d].lib and libucrt[d].lib) by default. This is done to avoid
+  # linking in VCRUNTIME140.DLL for a simplified xcopy experience by reducing the dependency on VC REDIST.
+  #
+  # For Release builds, we shall dynamically link into uCRT [ucrtbase.dll] (which is pushed down as a Windows Update on downlevel OS) but
+  # wont do the same for debug/checked builds since ucrtbased.dll is not redistributable and Debug/Checked builds are not
+  # production-time scenarios.
+  add_compile_options($<$<OR:$<CONFIG:Release>,$<CONFIG:Relwithdebinfo>>:/MT>)
+  add_compile_options($<$<OR:$<CONFIG:Debug>,$<CONFIG:Checked>>:/MTd>)
 
   set(CMAKE_ASM_MASM_FLAGS "${CMAKE_ASM_MASM_FLAGS} /ZH:SHA_256")
-  
+
 endif (WIN32)
 
 if(CLR_CMAKE_ENABLE_CODE_COVERAGE)
diff --git a/src/coreclr/cross/toolchain.cmake b/src/coreclr/cross/toolchain.cmake
index 3504f94a3d..9278b153aa 100644
--- a/src/coreclr/cross/toolchain.cmake
+++ b/src/coreclr/cross/toolchain.cmake
@@ -1,5 +1,5 @@
 set(CROSS_ROOTFS $ENV{ROOTFS_DIR})
-set(TARGET_ARCH_NAME $ENV{TARGET_BUILD_ARCH})
+set(TARGET_ARCH_NAME "armel")
 set(CMAKE_SYSTEM_NAME Linux)
 set(CMAKE_SYSTEM_VERSION 1)
 
@@ -27,8 +27,8 @@ if(TARGET_ARCH_NAME STREQUAL "armel")
     include_directories(SYSTEM ${CROSS_ROOTFS}/usr/lib/gcc/${TIZEN_TOOLCHAIN}/include/c++/)
     include_directories(SYSTEM ${CROSS_ROOTFS}/usr/lib/gcc/${TIZEN_TOOLCHAIN}/include/c++/armv7l-tizen-linux-gnueabi)
   else() # TODO: this setting assumes debian armel rootfs
-    include_directories(SYSTEM ${CROSS_ROOTFS}/usr/include/c++/4.9)
-    include_directories(SYSTEM ${CROSS_ROOTFS}/usr/include/${TOOLCHAIN}/c++/4.9)
+    #include_directories(SYSTEM ${CROSS_ROOTFS}/usr/include/c++/4.9)
+    #include_directories(SYSTEM ${CROSS_ROOTFS}/usr/include/${TOOLCHAIN}/c++/4.9)
   endif()
 elseif(TARGET_ARCH_NAME STREQUAL "arm64")
   include_directories(SYSTEM ${CROSS_ROOTFS}/usr/include)
@@ -61,15 +61,17 @@ if(TARGET_ARCH_NAME STREQUAL "armel")
     add_compile_param(CROSS_LINK_FLAGS "-L${CROSS_ROOTFS}/usr/lib")
     add_compile_param(CROSS_LINK_FLAGS "-L${CROSS_ROOTFS}/usr/lib/gcc/${TIZEN_TOOLCHAIN}")
   else()
-    add_compile_param(CROSS_LINK_FLAGS "-B${CROSS_ROOTFS}/usr/lib/gcc/${TOOLCHAIN}/4.9")
-    add_compile_param(CROSS_LINK_FLAGS "-L${CROSS_ROOTFS}/usr/lib/${TOOLCHAIN}")
-    add_compile_param(CROSS_LINK_FLAGS "-L${CROSS_ROOTFS}/lib/${TOOLCHAIN}")
-    add_compile_param(CROSS_LINK_FLAGS "-L${CROSS_ROOTFS}/usr/lib/gcc/${TOOLCHAIN}/4.9")
+    #add_compile_param(CROSS_LINK_FLAGS "-B${CROSS_ROOTFS}/usr/lib/gcc/${TOOLCHAIN}/4.9")
+    #add_compile_param(CROSS_LINK_FLAGS "-L${CROSS_ROOTFS}/usr/lib/${TOOLCHAIN}")
+    #add_compile_param(CROSS_LINK_FLAGS "-L${CROSS_ROOTFS}/lib/${TOOLCHAIN}")
+    #add_compile_param(CROSS_LINK_FLAGS "-L${CROSS_ROOTFS}/usr/lib/gcc/${TOOLCHAIN}/4.9")
+    add_compile_param(CROSS_LINK_FLAGS "-target ${TOOLCHAIN}")
+    add_compile_param(CROSS_LINK_FLAGS "-target ${TOOLCHAIN} -mthumb -mfpu=vfpv3 -mfloat-abi=softfp -march=armv7l")
   endif()
 elseif(TARGET_ARCH_NAME MATCHES "^(arm|arm64)$")
   add_compile_param(CROSS_LINK_FLAGS "-target ${TOOLCHAIN}")
-  add_compile_param(CROSS_LINK_FLAGS "-B${CROSS_ROOTFS}/usr/lib/gcc/${TOOLCHAIN}")
-  add_compile_param(CROSS_LINK_FLAGS "-L${CROSS_ROOTFS}/lib/${TOOLCHAIN}")
+  #add_compile_param(CROSS_LINK_FLAGS "-B${CROSS_ROOTFS}/usr/lib/gcc/${TOOLCHAIN}")
+  #add_compile_param(CROSS_LINK_FLAGS "-L${CROSS_ROOTFS}/lib/${TOOLCHAIN}")
 else() # x86 case
   add_compile_param(CROSS_LINK_FLAGS "-B${CROSS_ROOTFS}/usr/lib/gcc/i686-linux-gnu")
   add_compile_param(CROSS_LINK_FLAGS "-L${CROSS_ROOTFS}/lib/i386-linux-gnu")
@@ -84,8 +86,9 @@ add_compile_options(--sysroot=${CROSS_ROOTFS})
 if(TARGET_ARCH_NAME MATCHES "^(arm|armel)$")
   add_compile_options(-mthumb)
   add_compile_options(-mfpu=vfpv3)
+  add_compile_options(-march=armv7l)
   if(TARGET_ARCH_NAME STREQUAL "armel")
-    add_compile_options(-target armv7-linux-gnueabi)
+    add_compile_options(-target ${TOOLCHAIN})
     add_compile_options(-mfloat-abi=softfp)
     if(DEFINED TIZEN_TOOLCHAIN)
       add_compile_options(-Wno-deprecated-declarations) # compile-time option
@@ -106,13 +109,13 @@ if(TARGET_ARCH_NAME MATCHES "^(arm|armel|x86)$")
   if(TARGET_ARCH_NAME STREQUAL "x86")
     set(LLVM_CROSS_DIR "$ENV{LLVM_CROSS_HOME}")
   else() # arm/armel case
-    set(LLVM_CROSS_DIR "$ENV{LLVM_ARM_HOME}")
+    #set(LLVM_CROSS_DIR "$ENV{LLVM_ARM_HOME}")
   endif()
   if(LLVM_CROSS_DIR)
-    set(WITH_LLDB_LIBS "${LLVM_CROSS_DIR}/lib/" CACHE STRING "")
-    set(WITH_LLDB_INCLUDES "${LLVM_CROSS_DIR}/include" CACHE STRING "")
-    set(LLDB_H "${WITH_LLDB_INCLUDES}" CACHE STRING "")
-    set(LLDB "${LLVM_CROSS_DIR}/lib/liblldb.so" CACHE STRING "")
+    #set(WITH_LLDB_LIBS "${LLVM_CROSS_DIR}/lib/" CACHE STRING "")
+    #set(WITH_LLDB_INCLUDES "${LLVM_CROSS_DIR}/include" CACHE STRING "")
+    #set(LLDB_H "${WITH_LLDB_INCLUDES}" CACHE STRING "")
+    #set(LLDB "${LLVM_CROSS_DIR}/lib/liblldb.so" CACHE STRING "")
   else()
     if(TARGET_ARCH_NAME STREQUAL "x86")
       set(WITH_LLDB_LIBS "${CROSS_ROOTFS}/usr/lib/i386-linux-gnu" CACHE STRING "")
@@ -123,8 +126,8 @@ if(TARGET_ARCH_NAME MATCHES "^(arm|armel|x86)$")
         set(WITH_LLDB_INCLUDES "${CROSS_ROOTFS}/usr/lib/llvm-3.6/include")
       endif()
     else() # arm/armel case
-      set(WITH_LLDB_LIBS "${CROSS_ROOTFS}/usr/lib/${TOOLCHAIN}" CACHE STRING "")
-      set(WITH_LLDB_INCLUDES "${CROSS_ROOTFS}/usr/lib/llvm-3.6/include" CACHE STRING "")
+      #set(WITH_LLDB_LIBS "${CROSS_ROOTFS}/usr/lib/${TOOLCHAIN}" CACHE STRING "")
+      #set(WITH_LLDB_INCLUDES "${CROSS_ROOTFS}/usr/lib/llvm-3.6/include" CACHE STRING "")
     endif()
   endif()
 endif()
diff --git a/src/coreclr/src/pal/src/arch/arm/signalhandlerhelper.cpp b/src/coreclr/src/pal/src/arch/arm/signalhandlerhelper.cpp
index 4efecfc1c1..f4a1760cb7 100644
--- a/src/coreclr/src/pal/src/arch/arm/signalhandlerhelper.cpp
+++ b/src/coreclr/src/pal/src/arch/arm/signalhandlerhelper.cpp
@@ -59,7 +59,7 @@ void ExecuteHandlerOnOriginalStack(int code, siginfo_t *siginfo, void *context,
 #else
     size_t size = ALIGN_UP(sizeof(ucontext->uc_mcontext), 8);
     sp -= size / sizeof(size_t);
-    *(sigcontext *)sp = ucontext->uc_mcontext;
+    *(mcontext_t *)sp = ucontext->uc_mcontext;
 #endif
 
     // Switch the current context to the signal_handler_worker and the original stack
